require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TimeReportsController, type: :controller do

  let(:valid_attributes) {
    { report_id: 1, date: '2/08/2018', hours_worked: 3, employee_id: 1, job_group: 'A' }
  }

  let(:invalid_attributes) {
    { report_id: 1, date: '2/08/2018', hours_worked: 3, employee_id: 1, job_group: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TimeReportsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      time_report = TimeReport.create! valid_attributes
      get :index, {}, valid_session
      expect(response).to be_success
    end

    it "returns a failure message" do
      time_report = TimeReport.create invalid_attributes
      expect(time_report.errors[:job_group]).to eq(["can't be blank"])
    end
  end

  describe 'CSV upload action empty file' do
    before {
      @empty_file = fixture_file_upload('files/payroll_empty.csv', 'text/csv')
    }

    it 'says has no data' do
      request.accept = "application/json"
      post :csv_upload, :csv_file => @empty_file
      expect(response.body).to match(/csv file doesn't have any data/)
      expect(response).to have_http_status(400)
    end
  end

  describe 'CSV upload valid file' do
    before {
      @data_file1 = fixture_file_upload('files/payroll_sample1.csv', 'text/csv')
      @data_file2 = fixture_file_upload('files/payroll_sample1.csv', 'text/csv')
    }

    it 'creates a time report' do
      request.accept = "application/json"
      post :csv_upload, :csv_file => @data_file1
      expect(response.body).to match(/csv file process successfull/)
      expect(response).to have_http_status(201)
    end

    it 'should say time report already created' do
      request.accept = "application/json"
      post :csv_upload, :csv_file => @data_file1
      post :csv_upload, :csv_file => @data_file2
      expect(response.body).to match(/Report already processed. Re-submit is not allowed/)
      expect(response).to have_http_status(400)
    end
  end

  describe 'CSV upload with no report id' do
    before {
      @no_report_data_file = fixture_file_upload('files/payroll_no_report_id.csv', 'text/csv')
    }

    it 'says report id missing' do
      request.accept = "application/json"
      post :csv_upload, :csv_file => @no_report_data_file
      expect(response.body).to match(/Either report_id or data rows are missing/)
      expect(response).to have_http_status(400)
    end
  end

  describe 'CSV upload invalid file' do
    before {
      @error_data_file = fixture_file_upload('files/payroll_invalid.csv', 'text/csv')
    }

    it 'says error occured while processing' do
      request.accept = "application/json"
      post :csv_upload, :csv_file => @error_data_file
      expect(response.body).to match(/Error occured while processing report/)
      expect(response).to have_http_status(500)
    end
  end
end
